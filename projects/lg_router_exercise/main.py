# main.py (Vers√£o Melhorada com Rich)
"""Ponto de entrada principal para a aplica√ß√£o de processamento de strings."""

from loguru import logger
from pydantic import ValidationError
from rich.console import Console
from rich.panel import Panel
from rich.text import Text

from .graph_builder import build_graph
from .settings import get_settings
from .state import State

# Cria uma inst√¢ncia do console do Rich para imprimir sa√≠das formatadas
console = Console()


def setup_logger() -> None:
    """Configura o logger para uma sa√≠da simples no console."""
    logger.remove()
    logger.add(lambda msg: print(msg, end=""), format="{message}")


def main() -> None:
    """Fun√ß√£o principal que constr√≥i e executa o grafo."""
    setup_logger()
    logger.info("üöÄ Iniciando a aplica√ß√£o e carregando configura√ß√µes...")
    settings = get_settings()
    logger.info(
        f"‚úÖ Configura√ß√µes carregadas para o projeto: '{settings.langsmith_project}'"
    )

    console.print("\n[bold cyan]üõ†Ô∏è  Construindo o grafo...[/bold cyan]")
    app = build_graph()
    console.print(
        "[bold green]‚úÖ Grafo constru√≠do e compilado com sucesso![/bold green]"
    )

    console.print("\n[bold]--- ESTRUTURA DO GRAFO ---[/bold]")
    app.get_graph().print_ascii()
    console.print("[bold]--------------------------[/bold]\n")

    test_cases = [
        {"user_string": "Hello LangGraph!", "action_type": "reverse"},
        {"user_string": "Python is Fun", "action_type": "upper"},
        {"user_string": "Test Error", "action_type": "invalid_action"},
    ]

    success_count = 0
    fail_count = 0

    for i, inputs in enumerate(test_cases):
        console.print(f"[bold]--- ‚ñ∂Ô∏è  EXECUTANDO CASO DE TESTE #{i + 1} ---[/bold]")
        try:
            State.model_validate(inputs)
            final_state = app.invoke(inputs)

            # Cria um painel visualmente agrad√°vel para o resultado
            result_text = Text()
            result_text.append("Entrada....: ", style="bold")
            result_text.append(f"'{final_state['user_string']}'\n")
            result_text.append("A√ß√£o......: ", style="bold")
            result_text.append(f"'{final_state['action_type']}'\n")
            result_text.append("Resultado..: ", style="bold green")
            result_text.append(
                f"'{final_state['processed_string']}'", style="bold green"
            )

            console.print(
                Panel(
                    result_text,
                    title="[bold green]‚úÖ RESULTADO FINAL[/bold green]",
                    expand=False,
                )
            )
            print()  # Adiciona uma linha em branco
            success_count += 1

        except ValidationError:
            fail_count += 1
            error_text = Text()
            error_text.append(f"Input inv√°lido: {inputs}\n", style="bold yellow")
            error_text.append(
                "A a√ß√£o solicitada n√£o √© permitida. Op√ß√µes v√°lidas s√£o 'reverse' ou\
            'upper'.",
                style="yellow",
            )

            console.print(
                Panel(
                    error_text,
                    title="[bold red]‚ùå ERRO DE VALIDA√á√ÉO[/bold red]",
                    expand=False,
                )
            )
            print()

    console.print(
        f"[bold]Execu√ß√£o Conclu√≠da:[/bold] {success_count} com sucesso, {fail_count}\
 com falha de valida√ß√£o."
    )


if __name__ == "__main__":
    main()
