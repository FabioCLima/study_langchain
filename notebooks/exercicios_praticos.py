"""
Exerc√≠cios Pr√°ticos: Construindo Classes de Chatbot
==================================================

Este arquivo cont√©m exerc√≠cios pr√°ticos para ajudar voc√™ a dominar
a constru√ß√£o de classes de chatbot usando LangChain.
"""

import os
from typing import Dict, Any, List
from dotenv import find_dotenv, load_dotenv
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough


# ============================================================================
# EXERC√çCIO 1: Chatbot B√°sico
# ============================================================================

def exercicio_1_basico():
    """
    EXERC√çCIO 1: Criar um chatbot b√°sico
    
    Objetivo: Implementar a classe Chatbot mais simples poss√≠vel
    com apenas os componentes essenciais.
    
    Tarefas:
    1. Criar a classe Chatbot
    2. Implementar __init__ com par√¢metros b√°sicos
    3. Implementar m√©todo chat()
    4. Testar a funcionalidade
    """
    
    print("üéØ EXERC√çCIO 1: Chatbot B√°sico")
    print("=" * 50)
    
    # TODO: Implemente a classe Chatbot b√°sica aqui
    class ChatbotBasico:
        def __init__(self, name="Assistant"):
            # Seu c√≥digo aqui
            pass
        
        def chat(self, message):
            # Seu c√≥digo aqui
            pass
    
    # TODO: Teste sua implementa√ß√£o
    # bot = ChatbotBasico("Tutor")
    # response = bot.chat("Ol√°!")
    # print(response)
    
    print("‚úÖ Exerc√≠cio 1 conclu√≠do!")
    print()


# ============================================================================
# EXERC√çCIO 2: Chatbot com Personalidade
# ============================================================================

def exercicio_2_personalidade():
    """
    EXERC√çCIO 2: Adicionar personalidade ao chatbot
    
    Objetivo: Expandir a classe para incluir personalidade configur√°vel
    e diferentes tipos de chatbot.
    
    Tarefas:
    1. Adicionar par√¢metro personality ao __init__
    2. Implementar m√©todo update_personality()
    3. Criar diferentes tipos de chatbot
    4. Testar mudan√ßa de personalidade
    """
    
    print("üéØ EXERC√çCIO 2: Chatbot com Personalidade")
    print("=" * 50)
    
    # Exemplos de personalidades para testar:
    personalidades = {
        "tutor": "You are a helpful programming tutor. Explain concepts clearly and provide examples.",
        "comedian": "You are a funny comedian. Always respond with humor and jokes.",
        "chef": "You are a professional chef. Give cooking advice and recipes.",
        "teacher": "You are a patient teacher. Explain things step by step."
    }
    
    # TODO: Implemente a classe Chatbot com personalidade
    class ChatbotPersonalidade:
        def __init__(self, name="Assistant", personality="You are a helpful assistant"):
            # Seu c√≥digo aqui
            pass
        
        def chat(self, message):
            # Seu c√≥digo aqui
            pass
        
        def update_personality(self, new_personality):
            # Seu c√≥digo aqui
            pass
    
    # TODO: Teste diferentes personalidades
    # bot = ChatbotPersonalidade("Chef", personalidades["chef"])
    # response = bot.chat("Como fazer arroz?")
    # print(response)
    
    print("‚úÖ Exerc√≠cio 2 conclu√≠do!")
    print()


# ============================================================================
# EXERC√çCIO 3: Chatbot com Configura√ß√µes Avan√ßadas
# ============================================================================

def exercicio_3_configuracoes():
    """
    EXERC√çCIO 3: Adicionar configura√ß√µes avan√ßadas
    
    Objetivo: Implementar configura√ß√µes de modelo, valida√ß√£o e tratamento de erros.
    
    Tarefas:
    1. Adicionar configura√ß√µes de modelo (temperature, max_tokens)
    2. Implementar valida√ß√£o de entrada
    3. Adicionar tratamento de erros
    4. Implementar m√©todo get_info()
    """
    
    print("üéØ EXERC√çCIO 3: Chatbot com Configura√ß√µes Avan√ßadas")
    print("=" * 50)
    
    # TODO: Implemente a classe Chatbot com configura√ß√µes avan√ßadas
    class ChatbotAvancado:
        def __init__(self, name="Assistant", personality="You are a helpful assistant", 
                     model_name="gpt-3.5-turbo", temperature=0.0, max_tokens=1000):
            # Seu c√≥digo aqui
            pass
        
        def chat(self, message):
            # Seu c√≥digo aqui
            # Adicione valida√ß√£o de entrada
            # Adicione tratamento de erros
            pass
        
        def get_info(self):
            # Seu c√≥digo aqui
            pass
        
        def update_personality(self, new_personality):
            # Seu c√≥digo aqui
            pass
    
    # TODO: Teste as configura√ß√µes avan√ßadas
    # bot = ChatbotAvancado("Tutor", temperature=0.7, max_tokens=500)
    # info = bot.get_info()
    # print(info)
    
    print("‚úÖ Exerc√≠cio 3 conclu√≠do!")
    print()


# ============================================================================
# EXERC√çCIO 4: Chatbot Especializado
# ============================================================================

def exercicio_4_especializado():
    """
    EXERC√çCIO 4: Criar chatbot especializado
    
    Objetivo: Criar uma classe base e classes especializadas que herdam dela.
    
    Tarefas:
    1. Criar classe base ChatbotBase
    2. Criar classes especializadas (TutorChatbot, ChefChatbot, etc.)
    3. Implementar m√©todos espec√≠ficos para cada especializa√ß√£o
    4. Testar as diferentes especializa√ß√µes
    """
    
    print("üéØ EXERC√çCIO 4: Chatbot Especializado")
    print("=" * 50)
    
    # TODO: Implemente a hierarquia de classes
    class ChatbotBase:
        def __init__(self, name, personality, model_name="gpt-3.5-turbo", temperature=0.0):
            # Seu c√≥digo aqui
            pass
        
        def chat(self, message):
            # Seu c√≥digo aqui
            pass
    
    class TutorChatbot(ChatbotBase):
        def __init__(self, subject="programming"):
            # Seu c√≥digo aqui
            pass
        
        def explain_concept(self, concept):
            # M√©todo espec√≠fico para tutores
            pass
    
    class ChefChatbot(ChatbotBase):
        def __init__(self):
            # Seu c√≥digo aqui
            pass
        
        def get_recipe(self, dish):
            # M√©todo espec√≠fico para chefs
            pass
    
    # TODO: Teste as classes especializadas
    # tutor = TutorChatbot("Python")
    # chef = ChefChatbot()
    
    print("‚úÖ Exerc√≠cio 4 conclu√≠do!")
    print()


# ============================================================================
# EXERC√çCIO 5: Chatbot com Mem√≥ria
# ============================================================================

def exercicio_5_memoria():
    """
    EXERC√çCIO 5: Adicionar mem√≥ria ao chatbot
    
    Objetivo: Implementar mem√≥ria de conversa para manter contexto.
    
    Tarefas:
    1. Adicionar ConversationBufferMemory
    2. Implementar hist√≥rico de conversas
    3. Adicionar m√©todo para limpar mem√≥ria
    4. Testar conversas com contexto
    """
    
    print("üéØ EXERC√çCIO 5: Chatbot com Mem√≥ria")
    print("=" * 50)
    
    # TODO: Implemente a classe Chatbot com mem√≥ria
    class ChatbotComMemoria:
        def __init__(self, name="Assistant", personality="You are a helpful assistant"):
            # Seu c√≥digo aqui
            # Adicione ConversationBufferMemory
            pass
        
        def chat(self, message):
            # Seu c√≥digo aqui
            # Use a mem√≥ria para manter contexto
            pass
        
        def clear_memory(self):
            # Seu c√≥digo aqui
            pass
        
        def get_conversation_history(self):
            # Seu c√≥digo aqui
            pass
    
    # TODO: Teste a mem√≥ria
    # bot = ChatbotComMemoria("Tutor")
    # bot.chat("Meu nome √© Jo√£o")
    # bot.chat("Qual √© o meu nome?")
    
    print("‚úÖ Exerc√≠cio 5 conclu√≠do!")
    print()


# ============================================================================
# FUN√á√ÉO PRINCIPAL PARA EXECUTAR OS EXERC√çCIOS
# ============================================================================

def executar_exercicios():
    """Executa todos os exerc√≠cios em sequ√™ncia."""
    
    print("üöÄ INICIANDO EXERC√çCIOS PR√ÅTICOS")
    print("=" * 60)
    print()
    
    # Configurar ambiente
    try:
        _ = load_dotenv(find_dotenv())
        if not os.getenv("OPENAI_API_KEY"):
            print("‚ö†Ô∏è OPENAI_API_KEY n√£o encontrada. Alguns exerc√≠cios podem n√£o funcionar.")
            print("üí° Configure sua API key no arquivo .env")
            print()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao carregar ambiente: {e}")
        print()
    
    # Executar exerc√≠cios
    exercicios = [
        exercicio_1_basico,
        exercicio_2_personalidade,
        exercicio_3_configuracoes,
        exercicio_4_especializado,
        exercicio_5_memoria
    ]
    
    for i, exercicio in enumerate(exercicios, 1):
        try:
            exercicio()
        except Exception as e:
            print(f"‚ùå Erro no exerc√≠cio {i}: {e}")
            print()
    
    print("üéâ TODOS OS EXERC√çCIOS CONCLU√çDOS!")
    print("=" * 60)
    print()
    print("üí° Dicas para continuar aprendendo:")
    print("   1. Implemente cada exerc√≠cio passo a passo")
    print("   2. Teste com diferentes configura√ß√µes")
    print("   3. Adicione funcionalidades extras")
    print("   4. Integre com interfaces web")
    print("   5. Explore outros componentes do LangChain")


if __name__ == "__main__":
    executar_exercicios() 