#!/usr/bin/env python3
"""
Demonstra√ß√£o da documenta√ß√£o estilo Google em a√ß√£o.

Este arquivo mostra como a documenta√ß√£o estilo Google torna o c√≥digo
mais leg√≠vel e auto-explicativo.

Exemplo de uso:
    python3 exemplo_documentacao.py
    
    # Ou importar e explorar
    from exemplo_documentacao import ExemploClasse
    help(ExemploClasse)
    help(ExemploClasse.calcular_complexo)
"""
from typing import NoReturn


class ExemploClasse:
    """
    Classe de exemplo demonstrando documenta√ß√£o estilo Google.
    
    Esta classe implementa opera√ß√µes matem√°ticas b√°sicas com
    documenta√ß√£o completa para facilitar o entendimento.
    
    Attributes:
        nome (str): Nome da inst√¢ncia da classe
        valores (List[float]): Lista de valores num√©ricos
        ativo (bool): Status ativo/inativo da inst√¢ncia
    
    Example:
        # Criar uma inst√¢ncia
        obj = ExemploClasse("Calculadora", [1.0, 2.0, 3.0])
        
        # Usar m√©todos
        resultado = obj.calcular_soma()
        print(f"Soma: {resultado}")
        
        # Verificar status
        if obj.esta_ativo():
            print("Calculadora ativa!")
    
    Note:
        Todos os m√©todos s√£o thread-safe e podem ser chamados
        simultaneamente de diferentes threads.
    """

    def __init__(self, nome: str, valores: list[float], ativo: bool = True):
        """
        Inicializa uma nova inst√¢ncia da classe.
        
        Args:
            nome (str): Nome descritivo da inst√¢ncia
            valores (List[float]): Lista de valores num√©ricos para processar
            ativo (bool, optional): Status inicial. Padr√£o: True
        
        Example:
            obj = ExemploClasse("Minha Lista", [10, 20, 30])
            print(obj.nome)  # "Minha Lista"
        
        Raises:
            ValueError: Se a lista de valores estiver vazia
        """
        if not valores:
            raise ValueError("Lista de valores n√£o pode estar vazia")

        self.nome = nome
        """Nome descritivo da inst√¢ncia."""

        self.valores = valores
        """Lista de valores num√©ricos para processamento."""

        self.ativo = ativo
        """Status ativo/inativo da inst√¢ncia."""

    def calcular_soma(self) -> float:
        """
        Calcula a soma de todos os valores na lista.
        
        Returns:
            float: Soma total dos valores
            
        Example:
            obj = ExemploClasse("Teste", [1, 2, 3])
            soma = obj.calcular_soma()  # 6.0
            
        Note:
            Retorna 0.0 se a lista estiver vazia (n√£o deve acontecer
            devido √† valida√ß√£o no __init__).
        """
        return sum(self.valores)

    def calcular_media(self) -> float | None:
        """
        Calcula a m√©dia aritm√©tica dos valores.
        
        Returns:
            Optional[float]: M√©dia dos valores ou None se n√£o houver valores
            
        Example:
            obj = ExemploClasse("Teste", [10, 20, 30])
            media = obj.calcular_media()  # 20.0
            
        Note:
            Retorna None se n√£o houver valores para calcular a m√©dia.
        """
        if not self.valores:
            return None
        return sum(self.valores) / len(self.valores)

    def calcular_complexo(self, operacao: str, multiplicador: int | float = 1.0) -> float:
        """
        Executa opera√ß√µes matem√°ticas complexas nos valores.
        
        Esta fun√ß√£o permite diferentes tipos de opera√ß√µes matem√°ticas
        com um multiplicador opcional.
        
        Args:
            operacao (str): Tipo de opera√ß√£o ('soma', 'produto', 'maximo')
            multiplicador (Union[int, float], optional): Multiplicador para o resultado. Padr√£o: 1.0
        
        Returns:
            float: Resultado da opera√ß√£o multiplicado pelo multiplicador
            
        Raises:
            ValueError: Se a opera√ß√£o n√£o for reconhecida
            
        Example:
            obj = ExemploClasse("Teste", [2, 3, 4])
            
            # Soma com multiplicador
            resultado = obj.calcular_complexo("soma", 2.0)  # (2+3+4) * 2 = 18.0
            
            # Produto
            resultado = obj.calcular_complexo("produto")  # 2*3*4 = 24.0
            
            # M√°ximo
            resultado = obj.calcular_complexo("maximo", 0.5)  # 4 * 0.5 = 2.0
        
        Note:
            Opera√ß√µes suportadas: 'soma', 'produto', 'maximo'
        """
        if operacao == "soma":
            resultado = sum(self.valores)
        elif operacao == "produto":
            resultado = 1
            for valor in self.valores:
                resultado *= valor
        elif operacao == "maximo":
            resultado = max(self.valores)
        else:
            raise ValueError(f"Opera√ß√£o '{operacao}' n√£o suportada")

        return resultado * multiplicador

    def esta_ativo(self) -> bool:
        """
        Verifica se a inst√¢ncia est√° ativa.
        
        Returns:
            bool: True se ativo, False caso contr√°rio
            
        Example:
            obj = ExemploClasse("Teste", [1, 2, 3], ativo=False)
            if obj.esta_ativo():
                print("Ativo!")
            else:
                print("Inativo!")  # Ser√° impresso
        """
        return self.ativo

    def __str__(self) -> str:
        """
        Representa√ß√£o em string da inst√¢ncia.
        
        Returns:
            str: String formatada com nome e status
            
        Example:
            obj = ExemploClasse("Minha Classe", [1, 2, 3])
            print(obj)  # "ExemploClasse: Minha Classe (Ativo)"
        """
        status = "Ativo" if self.ativo else "Inativo"
        return f"ExemploClasse: {self.nome} ({status})"


def demonstrar_documentacao() -> None:
    """
    Demonstra como a documenta√ß√£o estilo Google funciona na pr√°tica.
    
    Esta fun√ß√£o cria inst√¢ncias da classe e mostra como a documenta√ß√£o
    torna o c√≥digo auto-explicativo.
    
    Returns:
        None: Apenas imprime exemplos
        
    Example:
        demonstrar_documentacao()
        
        # Ou importar e usar
        from exemplo_documentacao import demonstrar_documentacao
        demonstrar_documentacao()
    """
    print("üöÄ **Demonstra√ß√£o da Documenta√ß√£o Estilo Google**\n")

    # Criar inst√¢ncia
    obj = ExemploClasse("Calculadora Avan√ßada", [10, 20, 30, 40])

    print(f"üìù Inst√¢ncia criada: {obj}")
    print(f"üî¢ Valores: {obj.valores}")
    print(f"üìä Soma: {obj.calcular_soma()}")
    print(f"üìà M√©dia: {obj.calcular_media()}")
    print(f"‚ú® Soma x2: {obj.calcular_complexo('soma', 2)}")
    print(f"üéØ Produto: {obj.calcular_complexo('produto')}")
    print(f"üèÜ M√°ximo x0.5: {obj.calcular_complexo('maximo', 0.5)}")

    print("\nüí° **Como usar a documenta√ß√£o:**")
    print("   help(ExemploClasse)           # Documenta√ß√£o da classe")
    print("   help(obj.calcular_complexo)   # Documenta√ß√£o do m√©todo")
    print("   obj.__doc__                   # Docstring da classe")
    print("   obj.calcular_soma.__doc__     # Docstring do m√©todo")


def run_demo() -> NoReturn:
    """Executa a demonstra√ß√£o e encerra o programa"""
    demonstrar_documentacao()
    exit(0)


if __name__ == "__main__":
    run_demo()
