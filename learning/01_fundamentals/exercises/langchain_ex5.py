"""Uso de um modelo de chat para responder uma pergunta
Usando prompt template para gerar o prompt para ser usado com o modelo de chat.
"""

from typing import Any  # type: ignore

from langchain.prompts import (
    ChatPromptTemplate,  # type: ignore
    HumanMessagePromptTemplate,
    SystemMessagePromptTemplate,
)
from langchain_openai import ChatOpenAI  # type: ignore
from openai_client import create_analytical_model

# * 1. Instanciar o modelo de chat
chat: ChatOpenAI = create_analytical_model()

# * 2. Prompt template
system_template = """ Voc√™ √© um tutor de {linguagem} especializado em ensinar para 
{nivel_user}.

Caracter√≠sticas do seu ensino:
-N√≠vel: {nivel_user}
-linguagem: {linguagem}
-Estilo: {estilo_ensino}

Suas respostas devem ser {estilo_ensino} e adequadas para o n√≠vel {nivel_user}."""

system_prompt = SystemMessagePromptTemplate.from_template(system_template)

# * Template para mensagem do usu√°rio
human_template = """
T√≥pico: {topico}

Pergunta: {pergunta}

Contexto: {contexto}
"""
human_prompt = HumanMessagePromptTemplate.from_template(human_template)

# * 3 Criar o chat Prompt Template
chat_prompt = ChatPromptTemplate.from_messages([system_prompt, human_prompt])  # type: ignore

# * 4. Perfis de user
usuarios = [
    {
        "nome": "Jo√£o - Iniciante",
        "linguagem": "Python",
        "nivel_user": "iniciante completo",
        "estilo_ensino": "muito did√°tica, com exemplos simples e analogias",
    },
    {
        "nome": "Maria - Intermedi√°rio",
        "linguagem": "Python",
        "nivel_user": "programador intermedi√°rio",
        "estilo_ensino": "t√©cnica e direta, com boas pr√°ticas",
    },
    {
        "nome": "Pedro - Especialista",
        "linguagem": "Python",
        "nivel_user": "programador especialista",
        "estilo_ensino": "t√©cnica e direta, com boas pr√°ticas",
    },
]

# Perguntas para testar
perguntas = [
    {
        "topico": "Estruturas de repeti√ß√£o",
        "pergunta": "Como fa√ßo um loop for em Python?",
        "contexto": "Preciso iterar sobre uma lista de n√∫meros",
    },
    {
        "topico": "Tratamento de exce√ß√µes",
        "pergunta": "Como usar try/except?",
        "contexto": "Quero evitar que meu programa pare por erros",
    },
    # TODO: Adicione uma terceira pergunta sobre "list comprehensions"
    {
        "topico": "List Comprehensions",
        "pergunta": "Como usar list comprehensions?",
        "contexto": "Quero criar uma lista de n√∫meros pares",
    },
]


# 4. FUN√á√ÉO PRINCIPAL DO EXERC√çCIO
def executar_tutoria(usuario: dict[str, Any], pergunta: dict[str, Any]) -> None:
    """TODO: Implemente esta fun√ß√£o que:
    1. Formata o prompt usando os templates
    2. Cria o modelo de chat
    3. Obt√©m a resposta da IA
    4. Exibe o resultado formatado

    Args:
        usuario: Dicion√°rio com dados do usu√°rio
        pergunta: Dicion√°rio com dados da pergunta

    """
    print(f"\n{'=' * 50}")
    print(f"TUTORIA PARA: {usuario['nome']}")
    print(f"{'=' * 50}")

    # TODO: Seu c√≥digo aqui
    # Dica: Use chat_prompt.format_messages(**usuario, **pergunta)

    # 1. Formatar o prompt usando os templates
    messages = chat_prompt.format_messages(**usuario, **pergunta)

    # 2. Obter a resposta da IA
    response = chat.invoke(messages)

    # 3. Exibir o resultado formatado
    print(f"üìö T√≥pico: {pergunta['topico']}")
    print(f"‚ùì Pergunta: {pergunta['pergunta']}")
    print(f"üìù Contexto: {pergunta['contexto']}")
    print("\nü§ñ Resposta da IA:")
    print(f"{response.content}")  # type: ignore
    print(f"\n{'=' * 50}")


# 5. EXECU√á√ÉO DO EXERC√çCIO
def main() -> None:
    """Executa o exerc√≠cio completo"""
    print("üéì SISTEMA DE TUTORIA COM PROMPT TEMPLATES")
    print("Testando diferentes perfis de usu√°rio...")

    # TODO: Implemente os loops para testar todas as combina√ß√µes
    # de usu√°rios e perguntas usando a fun√ß√£o executar_tutoria()

    # Testar todas as combina√ß√µes de usu√°rios e perguntas
    for usuario in usuarios:
        for pergunta in perguntas:
            executar_tutoria(usuario, pergunta)


if __name__ == "__main__":
    main()
