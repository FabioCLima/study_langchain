'''
Entre point do projeto. Utiliza uma estrutura de dados Pydantic para validar
o nome de um animal e retorna uma descri√ß√£o b√°sica sobre ele
1- chain recebe o nome do animal, a chain intermedi√°ria extrai o nome do animal e
aciona o modelo LLM para gerar a descri√ß√£o do animal.

'''
import os
from utils import llm, AnimalDescricao # Importamos apenas o que vamos usar
from langchain_core.runnables import RunnableLambda
from langchain_core.prompts import ChatPromptTemplate

#* Desabilita o tracing para manter o output limpo nos exerc√≠cios
os.environ["LANGCHAIN_TRACING_V2"] = "false"

#* --- 1. A Chain Principal: Gera a descri√ß√£o de um animal ---
#* Esta √© a nossa "unidade de trabalho". Ela sabe como pegar o nome de um animal
#* e transform√°-lo em um objeto de descri√ß√£o.
prompt_gerador_descricao = ChatPromptTemplate.from_template(
    """Voc√™ √© um bi√≥logo especialista. Forne√ßa uma descri√ß√£o curta e interessante sobre 
    o animal: {nome_animal}."""
)

chain_geradora_descricao = (
    prompt_gerador_descricao
    # CORRE√á√ÉO: A sa√≠da deve ser AnimalDescricao, pois o prompt pede uma descri√ß√£o.
    | llm.with_structured_output(AnimalDescricao)
)


#* --- 2. O Formatador de Sa√≠da: Deixa o resultado bonito ---
#* Uma fun√ß√£o simples que recebe o objeto Pydantic e retorna uma string amig√°vel.
def formatar_saida_amigavel(animal_obj: AnimalDescricao) -> str:
    """Recebe um objeto AnimalDescricao e retorna uma string formatada."""
    return (
        f"--- üêæ Informa√ß√µes sobre: {animal_obj.nome} ---\n"
        f"Descri√ß√£o: {animal_obj.descricao}\n"
        f"-----------------------------------"
    )


#* --- 3. A Pipeline Completa: Conecta todos os passos ---
#* Esta √© a nossa esteira de produ√ß√£o. Ela define o fluxo do in√≠cio ao fim.
pipeline_completa = (
    #* Passo 1: Adaptar a entrada do usu√°rio.
    #* CORRE√á√ÉO: A lambda deve receber o dict de entrada {"animal": "..."}
    #* e transform√°-lo no dict que a chain_geradora_descricao espera: {"nome_animal": "..."}
    RunnableLambda(lambda entrada: {"nome_animal": entrada["animal"]})

    #* Passo 2: Executar a chain principal para obter o objeto de descri√ß√£o.
    | chain_geradora_descricao

    #* Passo 3: Formatar o objeto de descri√ß√£o para uma string leg√≠vel.
    #* CORRE√á√ÉO: O nome da fun√ß√£o aqui deve ser o mesmo que o nome da fun√ß√£o definida acima.
    | RunnableLambda(formatar_saida_amigavel)
)


#* --- 4. Teste da Pipeline ---
print("üöÄ Executando a pipeline com sa√≠da formatada...")

#* A entrada √© o que o usu√°rio final forneceria.
resultado_formatado = pipeline_completa.invoke({"animal": "polvo"})

print("\nüìå Resultado Final (Formatado):")
print(resultado_formatado)