# -*- coding: utf-8 -*-
"""
Solu√ß√£o refatorada para o exerc√≠cio de Workflow Multi-Etapas,
aplicando as melhores pr√°ticas atuais do LangChain (LCEL).

- Fluxo de dados expl√≠cito entre as chains.
- Nomenclatura clara.
- Cadeia de ponta a ponta (e2e) robusta.
"""

import os
from operator import itemgetter
from dotenv import load_dotenv, find_dotenv
from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnableParallel, RunnableLambda
from pydantic import BaseModel, Field

# --- 1. CONFIGURA√á√ÉO INICIAL E DO MODELO ---
# Carrega a chave da API do arquivo .env (boa pr√°tica de seguran√ßa)
_ = load_dotenv(find_dotenv())
if not os.getenv("OPENAI_API_KEY"):
    raise ValueError("OPENAI_API_KEY n√£o encontrada no .env")

# Instancia o modelo com temperatura baixa para respostas mais focadas
llm = ChatOpenAI(
    model="gpt-4o-mini",
    temperature=0.0,
)

# --- 2. LOGGING INTELIGENTE E PARSER (MANTIDO COMO BOA PR√ÅTICA) ---
# Lista para armazenar o hist√≥rico de chamadas brutas ao LLM para depura√ß√£o
logs = []
# Parser padr√£o para extrair o texto da resposta do LLM
parser = StrOutputParser()

# Esta cadeia paralela √© uma excelente pr√°tica. Ela faz duas coisas ao mesmo tempo:
# 1. 'output': Fornece o texto limpo e parseado.
# 2. 'log': Salva a mensagem bruta do modelo (AIMessage) na nossa lista de logs.
parse_and_log_output_chain = RunnableParallel(
    output=parser,
    log=RunnableLambda(lambda x: logs.append(x))
)

# --- 3. DEFINI√á√ÉO DAS ETAPAS MODULARES ---

# ETAPA 1: GERA√á√ÉO DA IDEIA
# Espera um dicion√°rio de entrada: {"industry": "..."}
idea_prompt = PromptTemplate.from_template(
    "You are a creative business advisor. "
    "Generate one innovative business idea in the industry: {industry}. "
    "Provide a brief description of the idea."
)
idea_chain = idea_prompt | llm | parse_and_log_output_chain

# ETAPA 2: AN√ÅLISE DA IDEIA
# Espera um dicion√°rio de entrada: {"idea": "..."}
analysis_prompt = PromptTemplate.from_template(
    "Analyze the following business idea: "
    "Idea: {idea} "
    "Identify 3 key strengths and 3 potential weaknesses of the idea."
)
analysis_chain = analysis_prompt | llm | parse_and_log_output_chain

# ETAPA 3: GERA√á√ÉO DO RELAT√ìRIO ESTRUTURADO
# Define a estrutura de sa√≠da desejada usando Pydantic. Isso garante dados confi√°veis.
class AnalysisReport(BaseModel):
    """Strengths and Weaknesses about a business idea."""
    strengths: list[str] = Field(description="List of the idea's strengths.")
    weaknesses: list[str] = Field(description="List of the idea's weaknesses.")

# Espera um dicion√°rio de entrada: {"analysis_text": "..."}
report_prompt = PromptTemplate.from_template(
    "Based on the following business analysis, generate a structured report.\n"
    "Analysis: {analysis_text}"
)

# A melhor pr√°tica para sa√≠da estruturada: .with_structured_output()
# Ele cuida de instruir o modelo para retornar um JSON no formato da classe Pydantic.
report_chain = report_prompt | llm.with_structured_output(schema=AnalysisReport)


# --- 4. A CHAIN DE PONTA A PONTA (VERS√ÉO MELHORADA E ROBUSTA) ---
# Esta √© a principal melhoria, corrigindo o "v√≠cio" do c√≥digo original.
# O fluxo de dados entre as etapas √© expl√≠cito e garantido.
e2e_chain = (
    # A entrada inicial para a cadeia √© {"industry": "..."}
    idea_chain
    # A sa√≠da da 'idea_chain' √© {'output': str, 'log': AIMessage}.
    # A 'analysis_chain' espera {'idea': str}.
    # Usamos 'itemgetter' para pegar o valor de 'output' e coloc√°-lo na chave 'idea'.
    | RunnableParallel(idea=itemgetter("output"))
    # Agora, o dado √© {'idea': '...texto da ideia...'}. Perfeito para a pr√≥xima etapa.
    | analysis_chain
    # A sa√≠da da 'analysis_chain' √© {'output': str, 'log': AIMessage}.
    # A 'report_chain' espera {'analysis_text': str}.
    # Fazemos a mesma transforma√ß√£o de dados.
    | RunnableParallel(analysis_text=itemgetter("output"))
    # Agora, o dado √© {'analysis_text': '...texto da an√°lise...'}.
    | report_chain
)

# --- 5. EXECU√á√ÉO ---
if __name__ == "__main__":
    print("üöÄ Executando a cadeia de ponta a ponta melhorada...")

    # A entrada √© um dicion√°rio, conforme esperado pela primeira 'chain'
    final_report = e2e_chain.invoke({"industry": "ecoturismo na chapada dos veadeiros"})

    print("\n" + "="*50)
    print("üìÑ Relat√≥rio Final Estruturado Gerado")
    print("="*50)
    print(f"‚úÖ Pontos Fortes: {final_report.strengths}")
    print(f"‚ö†Ô∏è Pontos Fracos:  {final_report.weaknesses}")
    print("="*50)

    # Opcional: Inspecionar os logs para depura√ß√£o
    print(f"\nüìö Foram registradas {len(logs)} chamadas ao LLM.")
    # print("Logs brutos:", logs)