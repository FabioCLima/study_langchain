"""
RAG + Zero Prompting + Tools + Chain of Thought
Exemplo pr√°tico combinando todas as t√©cnicas
"""

import math
import os

from langchain.agents import AgentType, initialize_agent
from langchain.chains import RetrievalQA
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.llms import OpenAI
from langchain.schema import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.tools import Tool
from langchain.vectorstores import FAISS

# * Carrega as vari√°veis de ambiente
_ = load_dotenv(find_dotenv())

# * Verifica se a API key est√° configurada
if not os.getenv("OPENAI_API_KEY"):
    raise ValueError("OPENAI_API_KEY n√£o encontrada no arquivo .env")

print("=== RAG + Zero Prompting + Tools + Chain of Thought ===\n")

# 1. CRIANDO BASE DE CONHECIMENTO (RAG)
print("1. Criando base de conhecimento...")

documentos = [
    "A velocidade da luz no v√°cuo √© 299.792.458 metros por segundo. √â uma constante fundamental da f√≠sica.",
    "A f√≥rmula da energia cin√©tica √© E = (1/2) * m * v¬≤, onde m √© a massa e v √© a velocidade.",
    "A lei de Ohm estabelece que V = I * R, onde V √© tens√£o, I √© corrente e R √© resist√™ncia.",
    "O teorema de Pit√°goras diz que em um tri√¢ngulo ret√¢ngulo, a¬≤ + b¬≤ = c¬≤, onde c √© a hipotenusa.",
    "A √°rea de um c√≠rculo √© œÄ * r¬≤, onde r √© o raio do c√≠rculo.",
    "A for√ßa gravitacional entre dois objetos √© F = G * (m1 * m2) / r¬≤, onde G √© a constante gravitacional.",
]

# Converter em Documents
docs = [Document(page_content=doc) for doc in documentos]

# Dividir em chunks
text_splitter = RecursiveCharacterTextSplitter(chunk_size=200, chunk_overlap=20)
textos = text_splitter.split_documents(docs)
print(f"‚úì Criados {len(textos)} chunks de texto")

# Criar vectorstore
try:
    embeddings = OpenAIEmbeddings()
    vectorstore = FAISS.from_documents(textos, embeddings)
    print("‚úì Vectorstore criado com sucesso!")
except Exception as e:
    print(f"‚ùå Erro ao criar vectorstore: {e}")
    print("   Configure sua OPENAI_API_KEY para continuar")
    exit()

# 2. CRIANDO TOOLS (FERRAMENTAS)
print("\n2. Criando ferramentas de c√°lculo...")


def calcular_energia_cinetica(massa: float, velocidade: float) -> float:
    """Calcula energia cin√©tica usando E = (1/2) * m * v¬≤"""
    return 0.5 * massa * (velocidade**2)


def calcular_area_circulo(raio: float) -> float:
    """Calcula √°rea de um c√≠rculo usando œÄ * r¬≤"""
    return math.pi * (raio**2)


def teorema_pitagoras(a: float, b: float) -> float:
    """Calcula hipotenusa usando a¬≤ + b¬≤ = c¬≤"""
    return math.sqrt(a**2 + b**2)


# Criar tools do LangChain
tool_energia = Tool(
    name="Calculadora_Energia_Cinetica",
    description="Calcula energia cin√©tica. Use: 'massa,velocidade' (ex: '10,5' para 10kg e 5m/s)",
    func=lambda x: calcular_energia_cinetica(*[float(i) for i in x.split(",")]),
)

tool_area = Tool(
    name="Calculadora_Area_Circulo",
    description="Calcula √°rea de c√≠rculo. Use apenas o raio (ex: '5' para raio=5)",
    func=lambda x: calcular_area_circulo(float(x)),
)

tool_pitagoras = Tool(
    name="Teorema_Pitagoras",
    description="Calcula hipotenusa. Use: 'cateto1,cateto2' (ex: '3,4')",
    func=lambda x: teorema_pitagoras(*[float(i) for i in x.split(",")]),
)

tools = [tool_energia, tool_area, tool_pitagoras]
print(f"‚úì Criadas {len(tools)} ferramentas de c√°lculo")

# 3. CONFIGURANDO RAG CHAIN
print("\n3. Configurando RAG...")

llm = OpenAI(temperature=0.1)
retriever = vectorstore.as_retriever(search_kwargs={"k": 2})

# Criar RAG chain
rag_chain = RetrievalQA.from_chain_type(
    llm=llm, chain_type="stuff", retriever=retriever, return_source_documents=True
)

# Tool para RAG
rag_tool = Tool(
    name="Consulta_Base_Conhecimento",
    description="Busca informa√ß√µes na base de conhecimento sobre f√≠sica e matem√°tica",
    func=lambda x: rag_chain.run(x),
)

all_tools = tools + [rag_tool]
print(f"‚úì RAG configurado com {len(all_tools)} ferramentas totais")

# 4. CRIANDO AGENT COM CHAIN OF THOUGHT
print("\n4. Criando agent com Chain of Thought...")

# Prompt que incentiva Chain of Thought (Zero Prompting)
system_prompt = """
Voc√™ √© um assistente de f√≠sica e matem√°tica que sempre:
1. Primeiro busca informa√ß√µes relevantes na base de conhecimento
2. Explica seu racioc√≠nio passo a passo
3. Usa ferramentas de c√°lculo quando necess√°rio
4. Mostra os c√°lculos e resultados claramente

SEMPRE siga este processo de pensamento:
- Passo 1: Identificar o que precisa ser resolvido
- Passo 2: Buscar f√≥rmulas ou conceitos relevantes
- Passo 3: Aplicar c√°lculos se necess√°rio
- Passo 4: Verificar e explicar o resultado
"""

# Criar agent
agent = initialize_agent(
    tools=all_tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
    handle_parsing_errors=True,
)

print("‚úì Agent configurado com sucesso!")

# 5. EXEMPLOS PR√ÅTICOS
print("\n" + "=" * 60)
print("EXEMPLOS PR√ÅTICOS")
print("=" * 60)

# Exemplo 1: RAG + CoT + Tool
print("\nüî¨ EXEMPLO 1: Energia Cin√©tica")
print("-" * 40)

pergunta1 = """
Explique a f√≥rmula da energia cin√©tica e calcule a energia cin√©tica 
de um objeto de 5kg movendo-se a 10 m/s.
"""

try:
    resultado1 = agent.run(system_prompt + pergunta1)
    print(f"\n‚úÖ Resultado: {resultado1}")
except Exception as e:
    print(f"‚ùå Erro: {e}")

# Exemplo 2: Teorema de Pit√°goras
print("\nüìê EXEMPLO 2: Teorema de Pit√°goras")
print("-" * 40)

pergunta2 = """
Preciso calcular a hipotenusa de um tri√¢ngulo ret√¢ngulo com catetos 
de 6 e 8 metros. Primeiro me explique o teorema envolvido.
"""

try:
    resultado2 = agent.run(system_prompt + pergunta2)
    print(f"\n‚úÖ Resultado: {resultado2}")
except Exception as e:
    print(f"‚ùå Erro: {e}")

# Exemplo 3: √Årea do c√≠rculo
print("\n‚≠ï EXEMPLO 3: √Årea do C√≠rculo")
print("-" * 40)

pergunta3 = """
Qual √© a f√≥rmula para calcular a √°rea de um c√≠rculo e qual seria 
a √°rea de um c√≠rculo com raio de 3 metros?
"""

try:
    resultado3 = agent.run(system_prompt + pergunta3)
    print(f"\n‚úÖ Resultado: {resultado3}")
except Exception as e:
    print(f"‚ùå Erro: {e}")

print("\n" + "=" * 60)
print("AN√ÅLISE DOS COMPONENTES")
print("=" * 60)

print("""
üîç RAG (Retrieval-Augmented Generation):
   - Busca informa√ß√µes relevantes nos documentos indexados
   - Fornece contexto atualizado para o LLM
   - Reduz alucina√ß√µes ao basear respostas em dados reais

üí≠ Zero Prompting:
   - N√£o usa exemplos espec√≠ficos no prompt
   - Confia na capacidade natural do LLM de seguir instru√ß√µes
   - Mais flex√≠vel que few-shot prompting

üõ†Ô∏è Tools:
   - Permitem c√°lculos precisos
   - Estendem capacidades do LLM
   - Fornecem resultados determin√≠sticos

üß† Chain of Thought:
   - For√ßa o modelo a explicar seu racioc√≠nio
   - Melhora a qualidade das respostas
   - Torna o processo transparente e audit√°vel
""")

print("\n‚ú® Exemplo criado com sucesso!")
print("Para executar: python rag_exemplo_simples.py")
