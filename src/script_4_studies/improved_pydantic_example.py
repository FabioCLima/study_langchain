"""üéØ TUTORIAL: LangChain + Pydantic - Structured Output
===================================================

Este exemplo demonstra como usar Pydantic com LangChain para:
1. Validar dados de entrada e sa√≠da
2. Garantir formato estruturado das respostas
3. Tornar o c√≥digo mais robusto e type-safe

"""

import json
from datetime import datetime

from langchain_openai import ChatOpenAI
from pydantic import BaseModel, Field


# üìã MODELO PYDANTIC MELHORADO
class AnswerWithJustification(BaseModel):
    """Modelo que representa uma resposta estruturada com justificativa.

    üí° Por que usar Pydantic aqui?
    - Valida√ß√£o autom√°tica de tipos
    - Documenta√ß√£o clara dos campos
    - Serializa√ß√£o JSON autom√°tica
    - Integra√ß√£o nativa com LangChain
    """

    answer: str = Field(
        description="Resposta clara e concisa para a pergunta",
        min_length=1,
        max_length=500,
    )

    justification: str = Field(
        description="Explica√ß√£o detalhada do racioc√≠nio", min_length=10, max_length=1000
    )

    confidence_level: float | None = Field(
        default=None, description="N√≠vel de confian√ßa (0-1) na resposta", ge=0.0, le=1.0
    )

    timestamp: str | None = Field(
        default_factory=lambda: datetime.now().isoformat(),
        description="Timestamp da resposta",
    )

    def display_response(self) -> str:
        """M√©todo para exibir a resposta de forma mais leg√≠vel.

        üîß BENEF√çCIO: Evita o scroll infinito no output!
        """
        output = f"""
‚îå‚îÄ üí¨ RESPOSTA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ {self.answer}
‚îú‚îÄ ü§î JUSTIFICATIVA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ {self.justification}
"""

        if self.confidence_level:
            confidence_bar = "‚ñà" * int(self.confidence_level * 10)
            output += f"""‚îú‚îÄ üìä CONFIAN√áA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ {confidence_bar} {self.confidence_level:.1%}
"""

        output += f"""‚îî‚îÄ üïí {self.timestamp} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"""
        return output


# üöÄ CLASSE PRINCIPAL PARA DEMONSTRA√á√ÉO
class LangChainPydanticDemo:
    """Demonstra o uso de Pydantic com LangChain de forma did√°tica.

    üìö CONCEITOS IMPORTANTES:

    1. **Structured Output**: LangChain for√ßa o LLM a retornar dados
       no formato exato do modelo Pydantic

    2. **Type Safety**: Pydantic valida automaticamente os tipos

    3. **Error Handling**: Falhas de valida√ß√£o s√£o capturadas
    """

    def __init__(self, model_name: str = "gpt-3.5-turbo"):
        self.model = ChatOpenAI(
            model=model_name,
            temperature=0.1,  # Baixa criatividade para respostas consistentes
        )

        # üîë PONTO CHAVE: with_structured_output() for√ßa o formato
        self.structured_model = self.model.with_structured_output(
            AnswerWithJustification
        )

    def ask_question(self, question: str) -> AnswerWithJustification:
        """Faz uma pergunta e retorna resposta estruturada.

        üéØ BENEF√çCIOS do Structured Output:
        - Resposta sempre no formato esperado
        - Valida√ß√£o autom√°tica dos dados
        - Facilita integra√ß√£o com APIs e bancos de dados
        """
        try:
            response = self.structured_model.invoke(question)
            return response

        except Exception as e:
            # Em caso de erro, retorna resposta padr√£o
            return AnswerWithJustification(
                answer="Erro ao processar pergunta",
                justification=f"Erro t√©cnico: {e!s}",
                confidence_level=0.0,
            )

    def demo_multiple_questions(self):
        """Demonstra o uso com m√∫ltiplas perguntas para mostrar consist√™ncia.
        """
        questions = [
            "O que pesa mais: 1kg de chumbo ou 1kg de algod√£o?",
            "Por que o c√©u √© azul?",
            "Qual a diferen√ßa entre Python e JavaScript?",
        ]

        print("üéì DEMONSTRA√á√ÉO: M√∫ltiplas perguntas com formato consistente\n")

        for i, question in enumerate(questions, 1):
            print(f"‚ùì PERGUNTA {i}: {question}")
            response = self.ask_question(question)
            print(response.display_response())
            print("\n" + "=" * 60 + "\n")


# üìñ EXEMPLOS PR√ÅTICOS DE USO
def exemplo_basico():
    """Exemplo b√°sico de uso do structured output."""
    print("üîµ EXEMPLO 1: Uso B√°sico")
    print("-" * 40)

    demo = LangChainPydanticDemo()

    question = "Explique o conceito de recurs√£o em programa√ß√£o"
    response = demo.ask_question(question)

    # ‚ú® SA√çDA LIMPA - sem scroll infinito!
    print(response.display_response())

    # üíæ BONUS: F√°cil convers√£o para JSON
    print("\nüîß BONUS - Dados em JSON:")
    print(json.dumps(response.model_dump(), indent=2, ensure_ascii=False))


def exemplo_avancado():
    """Exemplo avan√ßado mostrando valida√ß√£o."""
    print("\nüü¢ EXEMPLO 2: Valida√ß√£o com Pydantic")
    print("-" * 40)

    # Tentativa de criar resposta inv√°lida (para mostrar valida√ß√£o)
    try:
        invalid_response = AnswerWithJustification(
            answer="",  # ‚ùå Inv√°lido: muito curto
            justification="Curto",  # ‚ùå Inv√°lido: muito curto
            confidence_level=1.5,  # ‚ùå Inv√°lido: > 1.0
        )
    except Exception as e:
        print(f"‚ùå VALIDA√á√ÉO PYDANTIC FUNCIONOU: {e}")

    # ‚úÖ Resposta v√°lida
    valid_response = AnswerWithJustification(
        answer="Python √© uma linguagem de programa√ß√£o",
        justification="Python √© conhecida por sua sintaxe simples e leg√≠vel",
        confidence_level=0.9,
    )

    print("\n‚úÖ RESPOSTA V√ÅLIDA:")
    print(valid_response.display_response())


if __name__ == "__main__":
    print("üéØ TUTORIAL COMPLETO: LangChain + Pydantic\n")

    # Executa exemplos
    exemplo_basico()
    exemplo_avancado()

    # Demonstra√ß√£o completa
    print("\nüéì DEMONSTRA√á√ÉO COMPLETA:")
    print("=" * 60)
    demo = LangChainPydanticDemo()
    demo.demo_multiple_questions()

    print("""
üéì LI√á√ïES APRENDIDAS:

1. **Pydantic + LangChain = Dados Estruturados**
   - LLM retorna sempre no formato correto
   - Valida√ß√£o autom√°tica de tipos e valores

2. **Benef√≠cios para Produ√ß√£o**
   - Code completion no IDE
   - Documenta√ß√£o autom√°tica
   - Integra√ß√£o f√°cil com APIs

3. **Melhor UX**
   - Sa√≠da formatada e leg√≠vel
   - Sem scroll infinito
   - Informa√ß√µes organizadas

4. **Type Safety**
   - Erros capturados em desenvolvimento
   - C√≥digo mais robusto
   - Manuten√ß√£o facilitada
    """)
